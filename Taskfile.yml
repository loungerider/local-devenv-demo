version: "3"

tasks:
  devenv-init:
    desc: create podman machine and minikube cluster
    cmds:
      - touch ~/.kube/devenv-minikube-config
      - export KUBECONFIG=~/.kube/devenv-minikube-config
      - podman machine init --cpus=2 --memory=5120  
      - podman machine set --rootful
      - podman machine start
      - minikube start --cpus=2 --memory=4096 --addons=ingress --driver=podman --container-runtime=containerd --profile devenv

  devenv-init-large:
    desc: create podman machine and minikube cluster with extra resources
    cmds:
      - touch ~/.kube/devenv-minikube-config
      - export KUBECONFIG=~/.kube/devenv-minikube-config
      - podman machine init --cpus=4 --memory=18432 
      - podman machine set --rootful
      - podman machine start
      - minikube start --cpus=4 --memory=16384 --driver=podman --container-runtime=containerd --profile devenv
  
  devenv-minikube-start:
    desc: start minikube cluster
    cmds:
      - minikube start --driver=podman --container-runtime=containerd --profile devenv

  devenv-minikube-stop:
    desc: stop minikube cluster
    cmds:
      - minikube stop --profile devenv
      
  devenv-destroy:
    desc: destroys all minikube clusters and the podman machine
    deps: [devenv-minikube-stop]
    cmds:
      - minikube delete --all
      - podman machine stop
      - podman machine rm -f
      - rm ~/.kube/devenv-minikube-config

  devenv-status:
    desc: check status of dev environment
    cmds:
      - podman system connection list
      - podman machine list
      - minikube status --profile devenv

  devenv-hung:
    desc: minikube not responding
    cmds:
      - "[[ \"$(uname -s)\" == \"Darwin\" ]] && ps aux | grep podman | grep -v grep | awk '{print $2}' | xargs kill"
      - podman machine rm -f
      - minikube delete --all
      - rm ~/.kube/devenv-minikube-config

  devenv-dashboard:
    desc: start minikube dashboard
    cmds:
      - minikube addons enable metrics-server --profile devenv
      - minikube dashboard --profile devenv

  istio-download:
    desc: download istio
    dir: '{{.USER_WORKING_DIR}}'
    preconditions:
      - test -f istio.md
    cmds:
      - pwd
      - curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.22.0 sh -
      - istioctl x precheck

  istio-install-demo:
    desc: install istio demo
    dir: '{{.USER_WORKING_DIR}}'
    preconditions:
      - test -f manifest.yaml
    cmds:
      - pwd
      - istioctl install --set profile=demo -y
      - kubectl label namespace default istio-injection=enabled
      - kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
      - echo "Wait until all pods are running"
      - while [[ $(kubectl get pods -n default --field-selector=status.phase!=Running 2>/dev/null | wc -l) -gt 0 ]]; do echo "Waiting for all pods to be running..."; sleep 10; done; echo "All pods are running."
      - kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"
      - kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml
      - istioctl analyze

  default:
    desc: check status of dev environment
    deps: [devenv-status]
